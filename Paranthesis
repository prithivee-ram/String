VALID PARANTHESIS
-----------------

class Solution {
    public boolean isValid(String s) {
        
        Stack<Character> st = new Stack<Character>();
        
        for(char c : s.toCharArray())
        {
            if(c == '(')
                st.push(')');
            else if(c == '{')
                st.push('}');
            else if(c == '[')
                st.push(']');
            else if(st.isEmpty() || st.pop() != c)
                return false;
        }
        
        return st.isEmpty();
    }
}

VALID PARANTHESIS STRING
------------------------
class Solution {
    public boolean checkValidString(String s) {
        
        int low = 0;
        int high = 0;
        
        for(int i = 0; i < s.length(); i++)
        {
            if(s.charAt(i) == '(')
            {
                low++; high++;
            }
            else if(s.charAt(i) == ')')
            {
                low--; high--;
            }
            else if(s.charAt(i) == '*')
            {
                low--; high++;
            }
            
            if(low < 0)
                low = 0;
            if(high < 0)
                return false;
        }
        
        return low == 0;
    }
}

LONGEST VALID PARANTHESIS
-------------------------
class Solution {
    public int longestValidParentheses(String s) {
       
        if(s == null || s.length() == 0)
            return 0;
        
        int left = -1;
        int max = 0;
        
        Stack<Integer> st = new Stack<>();
        
        for(int i = 0; i < s.length(); i++)
        {
            if(s.charAt(i) == '(')
                st.push(i);
            else
            {
                if(st.isEmpty())
                    left = i;
                else
                {
                    st.pop();
                    if(st.isEmpty())
                        max = Math.max(max, i - left);
                    else
                        max = Math.max(max, i - st.peek());
                }
            }
        }
        
        return max;
    }
}
